/*v:1.0.1|by:grossman*/
!
function(d) {
    var k = function(a, b, j) {
            var g = "object" == typeof b,
                c;
            this.startDate = Date.today();
            this.endDate = Date.today();
            this.cleared = this.changed = this.maxDate = this.minDate = !1;
            this.ranges = {};
            this.opens = "right";
            this.cb = function() {};
            this.format = "MM/dd/yyyy";
            this.separator = " - ";
            this.showWeekNumbers = !1;
            this.buttonClasses = ["btn"];
            c = this.locale = {
                applyLabel: "Apply",
                clearLabel: "Clear",
                fromLabel: "From",
                toLabel: "To",
                weekLabel: "W",
                customRangeLabel: "Custom Range",
                daysOfWeek: Date.CultureInfo.shortestDayNames,
                monthNames: Date.CultureInfo.monthNames,
                firstDay: 0
            };
            this.leftCalendar = {
                month: Date.today().set({
                    day: 1,
                    month: this.startDate.getMonth(),
                    year: this.startDate.getFullYear()
                }),
                calendar: []
            };
            this.rightCalendar = {
                month: Date.today().set({
                    day: 1,
                    month: this.endDate.getMonth(),
                    year: this.endDate.getFullYear()
                }),
                calendar: []
            };
            this.element = d(a);
            this.element.hasClass("pull-right") && (this.opens = "left");
            if (this.element.is("input")) this.element.on({
                click: d.proxy(this.show, this),
                focus: d.proxy(this.show, this)
            });
            else this.element.on("click", d.proxy(this.show, this));
            g && "object" == typeof b.locale && d.each(c, function(a, d) {
                c[a] = b.locale[a] || d
            });
            this.container = d('<div class="daterangepicker dropdown-menu"><div class="calendar left"></div><div class="calendar right"></div><div class="ranges"><div class="range_inputs"><div class="daterangepicker_start_input" style="float: left"><label for="daterangepicker_start">' + this.locale.fromLabel + '</label><input class="input-mini" type="text" name="daterangepicker_start" value="" disabled="disabled" /></div><div class="daterangepicker_end_input" style="float: left; padding-left: 11px"><label for="daterangepicker_end">' + this.locale.toLabel + '</label><input class="input-mini" type="text" name="daterangepicker_end" value="" disabled="disabled" /></div><button class="btn btn-small btn-success applyBtn" disabled="disabled">' + this.locale.applyLabel + '</button>&nbsp;<button class="btn btn-small clearBtn">' + this.locale.clearLabel + "</button></div></div></div>").appendTo("body");
            if (g) {
                "string" == typeof b.format && (this.format = b.format);
                "string" == typeof b.separator && (this.separator = b.separator);
                "string" == typeof b.startDate && (this.startDate = Date.parse(b.startDate, this.format));
                "string" == typeof b.endDate && (this.endDate = Date.parse(b.endDate, this.format));
                "string" == typeof b.minDate && (this.minDate = Date.parse(b.minDate, this.format));
                "string" == typeof b.maxDate && (this.maxDate = Date.parse(b.maxDate, this.format));
                "object" == typeof b.startDate && (this.startDate = b.startDate);
                "object" == typeof b.endDate && (this.endDate = b.endDate);
                "object" == typeof b.minDate && (this.minDate = b.minDate);
                "object" == typeof b.maxDate && (this.maxDate = b.maxDate);
                if ("object" == typeof b.ranges) {
                    for (var e in b.ranges) a = b.ranges[e][0], g = b.ranges[e][1], "string" == typeof a && (a = Date.parse(a)), "string" == typeof g && (g = Date.parse(g)), this.minDate && a < this.minDate && (a = this.minDate), this.maxDate && g > this.maxDate && (g = this.maxDate), this.minDate && g < this.minDate || this.maxDate && a > this.maxDate || (this.ranges[e] = [a, g]);
                    a = "<ul>";
                    for (e in this.ranges) a += "<li>" + e + "</li>";
                    a += "<li>" + this.locale.customRangeLabel + "</li>";
                    this.container.find(".ranges").prepend(a + "</ul>")
                }
                if ("object" == typeof b.locale && "number" == typeof b.locale.firstDay) for (e = this.locale.firstDay = b.locale.firstDay; 0 < e;) this.locale.daysOfWeek.push(this.locale.daysOfWeek.shift()), e--;
                "string" == typeof b.opens && (this.opens = b.opens);
                "boolean" == typeof b.showWeekNumbers && (this.showWeekNumbers = b.showWeekNumbers);
                "string" == typeof b.buttonClasses && (this.buttonClasses = [b.buttonClasses]);
                "object" == typeof b.buttonClasses && (this.buttonClasses = b.buttonClasses)
            }
            var h = this.container;
            d.each(this.buttonClasses, function(a, b) {
                h.find("button").addClass(b)
            });
            "right" == this.opens && (e = this.container.find(".calendar.left"), a = this.container.find(".calendar.right"), e.removeClass("left").addClass("right"), a.removeClass("right").addClass("left"));
            ("undefined" == typeof b || "undefined" == typeof b.ranges) && this.container.find(".calendar").show();
            "function" == typeof j && (this.cb = j);
            this.container.addClass("opens" + this.opens);
            this.container.on("mousedown", d.proxy(this.mousedown, this));
            this.container.find(".calendar").on("click", ".prev", d.proxy(this.clickPrev, this));
            this.container.find(".calendar").on("click", ".next", d.proxy(this.clickNext, this));
            this.container.find(".ranges").on("click", "button.applyBtn", d.proxy(this.clickApply, this));
            this.container.find(".ranges").on("click", "button.clearBtn", d.proxy(this.clickClear, this));
            this.container.find(".calendar").on("click", "td.available", d.proxy(this.clickDate, this));
            this.container.find(".calendar").on("mouseenter", "td.available", d.proxy(this.enterDate, this));
            this.container.find(".calendar").on("mouseleave", "td.available", d.proxy(this.updateView, this));
            this.container.find(".ranges").on("click", "li", d.proxy(this.clickRange, this));
            this.container.find(".ranges").on("mouseenter", "li", d.proxy(this.enterRange, this));
            this.container.find(".ranges").on("mouseleave", "li", d.proxy(this.updateView, this));
            this.element.on("keyup", d.proxy(this.updateFromControl, this));
            this.updateView();
            this.updateCalendars()
        };
    k.prototype = {
        constructor: k,
        mousedown: function(a) {
            a.stopPropagation();
            a.preventDefault()
        },
        updateView: function() {
            this.leftCalendar.month.set({
                month: this.startDate.getMonth(),
                year: this.startDate.getFullYear()
            });
            this.rightCalendar.month.set({
                month: this.endDate.getMonth(),
                year: this.endDate.getFullYear()
            });
            this.container.find("input[name=daterangepicker_start]").val(this.startDate.toString(this.format));
            this.container.find("input[name=daterangepicker_end]").val(this.endDate.toString(this.format));
            this.startDate.equals(this.endDate) || this.startDate.isBefore(this.endDate) ? this.container.find("button.applyBtn").removeAttr("disabled") : this.container.find("button.applyBtn").attr("disabled", "disabled")
        },
        updateFromControl: function() {
            if (this.element.is("input")) {
                var a = this.element.val().split(this.separator),
                    b = Date.parseExact(a[0], this.format),
                    a = Date.parseExact(a[1], this.format);
                if (!(null == b || null == a) && !a.isBefore(b)) this.startDate = b, this.endDate = a, this.updateView(), this.cb(this.startDate, this.endDate), this.updateCalendars()
            }
        },
        notify: function() {
            this.cleared || this.updateView();
            this.element.is("input") && this.element.val(this.cleared ? "" : this.startDate.toString(this.format) + this.separator + this.endDate.toString(this.format));
            var a = this.cleared ? null : this.startDate,
                b = this.cleared ? null : this.endDate;
            this.cleared = !1;
            this.cb(a, b)
        },
        move: function() {
            "left" == this.opens ? this.container.css({
                top: this.element.offset().top + this.element.outerHeight(),
                right: d(window).width() - this.element.offset().left - this.element.outerWidth(),
                left: "auto"
            }) : this.container.css({
                top: this.element.offset().top + this.element.outerHeight(),
                left: this.element.offset().left,
                right: "auto"
            })
        },
        show: function(a) {
            this.container.show();
            this.move();
            a && (a.stopPropagation(), a.preventDefault());
            this.changed = !1;
            this.element.trigger("shown", {
                target: a.target,
                picker: this
            });
            d(document).on("mousedown", d.proxy(this.hide, this))
        },
        hide: function() {
            this.container.hide();
            d(document).off("mousedown", this.hide);
            this.changed && (this.changed = !1, this.notify())
        },
        enterRange: function(a) {
            a = a.target.innerHTML;
            a == this.locale.customRangeLabel ? this.updateView() : (a = this.ranges[a], this.container.find("input[name=daterangepicker_start]").val(a[0].toString(this.format)), this.container.find("input[name=daterangepicker_end]").val(a[1].toString(this.format)))
        },
        clickRange: function(a) {
            a = a.target.innerHTML;
            a == this.locale.customRangeLabel ? this.container.find(".calendar").show() : (a = this.ranges[a], this.startDate = a[0], this.endDate = a[1], this.leftCalendar.month.set({
                month: this.startDate.getMonth(),
                year: this.startDate.getFullYear()
            }), this.rightCalendar.month.set({
                month: this.endDate.getMonth(),
                year: this.endDate.getFullYear()
            }), this.updateCalendars(), this.changed = !0, this.container.find(".calendar").hide(), this.hide())
        },
        clickPrev: function(a) {
            d(a.target).parents(".calendar").hasClass("left") ? this.leftCalendar.month.add({
                months: -1
            }) : this.rightCalendar.month.add({
                months: -1
            });
            this.updateCalendars()
        },
        clickNext: function(a) {
            d(a.target).parents(".calendar").hasClass("left") ? this.leftCalendar.month.add({
                months: 1
            }) : this.rightCalendar.month.add({
                months: 1
            });
            this.updateCalendars()
        },
        enterDate: function(a) {
            var b = d(a.target).attr("title"),
                j = b.substr(1, 1),
                b = b.substr(3, 1);
            d(a.target).parents(".calendar").hasClass("left") ? this.container.find("input[name=daterangepicker_start]").val(this.leftCalendar.calendar[j][b].toString(this.format)) : this.container.find("input[name=daterangepicker_end]").val(this.rightCalendar.calendar[j][b].toString(this.format))
        },
        clickDate: function(a) {
            var b = d(a.target).attr("title"),
                j = b.substr(1, 1),
                b = b.substr(3, 1),
                g = d(a.target).parents(".calendar");
            g.hasClass("left") ? (startDate = this.leftCalendar.calendar[j][b], endDate = this.endDate, this.element.trigger("clicked", {
                dir: "left",
                picker: this
            })) : (startDate = this.startDate, endDate = this.rightCalendar.calendar[j][b], this.element.trigger("clicked", {
                dir: "right",
                picker: this
            }));
            g.find("td").removeClass("active");
            if (startDate.equals(endDate) || startDate.isBefore(endDate)) {
                d(a.target).addClass("active");
                if (!startDate.equals(this.startDate) || !endDate.equals(this.endDate)) this.changed = !0;
                this.startDate = startDate;
                this.endDate = endDate
            } else startDate.isAfter(endDate) && (d(a.target).addClass("active"), this.changed = !0, this.startDate = startDate, this.endDate = startDate.clone().add(1).days());
            this.leftCalendar.month.set({
                month: this.startDate.getMonth(),
                year: this.startDate.getFullYear()
            });
            this.rightCalendar.month.set({
                month: this.endDate.getMonth(),
                year: this.endDate.getFullYear()
            });
            this.updateCalendars()
        },
        clickApply: function() {
            this.hide()
        },
        clickClear: function() {
            this.cleared = this.changed = !0;
            this.hide()
        },
        updateCalendars: function() {
            this.leftCalendar.calendar = this.buildCalendar(this.leftCalendar.month.getMonth(), this.leftCalendar.month.getFullYear());
            this.rightCalendar.calendar = this.buildCalendar(this.rightCalendar.month.getMonth(), this.rightCalendar.month.getFullYear());
            this.container.find(".calendar.left").html(this.renderCalendar(this.leftCalendar.calendar, this.startDate, this.minDate, this.maxDate));
            this.container.find(".calendar.right").html(this.renderCalendar(this.rightCalendar.calendar, this.endDate, this.startDate, this.maxDate));
            this.element.trigger("updated", this)
        },
        buildCalendar: function(a, b) {
            var d = Date.today().set({
                day: 1,
                month: a,
                year: b
            }),
                g = d.clone().add(-1).day().getMonth(),
                c = d.clone().add(-1).day().getFullYear();
            Date.getDaysInMonth(b, a);
            for (var e = Date.getDaysInMonth(c, g), h = d.getDay(), d = [], f = 0; 6 > f; f++) d[f] = [];
            f = e - h + this.locale.firstDay + 1;
            f > e && (f -= 7);
            h == this.locale.firstDay && (f = e - 6);
            g = Date.today().set({
                day: f,
                month: g,
                year: c
            });
            for (e = c = f = 0; 42 > f; f++, c++, g = g.clone().add(1).day()) 0 < f && 0 == c % 7 && (c = 0, e++), d[e][c] = g;
            return d
        },
        renderCalendar: function(a, b, j, g) {
            var c = '<table class="table-condensed">',
                c = c + "<thead>",
                c = c + "<tr>";
            this.showWeekNumbers && (c += "<th></th>");
            c = !j || j < a[1][1] ? c + '<th class="prev available"><i class="icon-arrow-left"></i></th>' : c + "<th></th>";
            c += '<th colspan="5" style="width: auto">' + this.locale.monthNames[a[1][1].getMonth()] + a[1][1].toString(" yyyy") + "</th>";
            c = !g || g > a[1][1] ? c + '<th class="next available"><i class="icon-arrow-right"></i></th>' : c + "<th></th>";
            c += "</tr>";
            c += "<tr>";
            this.showWeekNumbers && (c += '<th class="week">' + this.locale.weekLabel + "</th>");
            d.each(this.locale.daysOfWeek, function(a, b) {
                c += "<th>" + b + "</th>"
            });
            for (var c = c + "</tr>", c = c + "</thead>", c = c + "<tbody>", e = 0; 6 > e; e++) {
                c += "<tr>";
                this.showWeekNumbers && (c += '<td class="week">' + a[e][0].getWeek() + "</td>");
                for (var h = 0; 7 > h; h++) {
                    var f = "available ",
                        f = f + (a[e][h].getMonth() == a[1][1].getMonth() ? "" : "off");
                    b.setHours(0, 0, 0, 0);
                    j && a[e][h] < j || g && a[e][h] > g ? f = " off disabled " : a[e][h].equals(b) ? (f += " active ", a[e][h].equals(this.startDate) && (f += " start-date "), a[e][h].equals(this.endDate) && (f += " end-date ")) : a[e][h] >= this.startDate && a[e][h] <= this.endDate && (f += " in-range ", a[e][h].equals(this.startDate) && (f += " start-date "), a[e][h].equals(this.endDate) && (f += " end-date "));
                    var k = "r" + e + "c" + h,
                        c = c + ('<td class="' + f.replace(/\s+/g, " ").replace(/^\s?(.*?)\s?$/, "$1") + '" title="' + k + '">' + a[e][h].getDate() + "</td>")
                }
                c += "</tr>"
            }
            c += "</tbody>";
            return c += "</table>"
        }
    };
    d.fn.daterangepicker = function(a, b) {
        this.each(function() {
            var j = d(this);
            j.data("daterangepicker") || j.data("daterangepicker", new k(j, a, b))
        });
        return this
    }
}(window.jQuery);